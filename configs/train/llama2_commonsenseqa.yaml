experiment:
  name: llama2-7B-CSQA-LoRA-D
  seed: [1]
  device_map: null # auto, cuda, cpu

distributed:
  enabled: true
  sharding_strategy: FULL_SHARD # SHARD_GRAD_OP, NO_SHARD, HYBRID_SHARD
  wrap_policy: MODEL_SPECIFIC # MODEL_SPECIFIC, SIZE_BAZED
  min_num_params: 1e5
  checkpoint_type: full_state # full_state, local_state
  activation_chekpoint: false

model:
  name: LLMCausal
  backbone: meta-llama/Llama-2-7b-chat-hf
  backbone_path: null # if null it uses the default cache path set for huggingface
  load_in_8bit: false
  load_in_4bit: false
  use_bf16: false # not sure if this will produce good results. Problem with grad scaling
  freeze_first_n_layers: -1
  peft:
    method: null # null, lora, ...
    r: 32
    lora_alpha: 32
    target_modules: !!python/tuple ["q_proj", "v_proj"]
    bias: none
    task_type: CAUSAL_LM
    lora_dropout: 0.05
    inference_mode: false

tokenizer:
  name: meta-llama/Llama-2-7b-chat-hf
  cache_dir: null
  padding_side: right # left or right
  add_pad_token: true

dataset:
  name: commonsense_qa
  root_dir: null # if null it uses the default cache path set for huggingface
  batch_size: 16
  test_batch_size: 32
  num_workers: 2
  supervised: true # if false it appends "\nA: The answer is " else "\nA: The answer is <(a) correct answer>"
  prompt_path: null # prompts/commonsenseQA_SP.txt # path to a text file where the prompts are stored
  max_padding_length: 130
  output_fields: !!python/tuple ["input_ids", "attention_mask", "labels"]
  force_download: false

optimizers: !!python/tuple
  - optimizer: # name of the optimizer
      name: torch.optim.AdamW
      lr: 0.00005
      weight_decay: 0.0
      gradient_norm_clipping: 0.1
      schedulers: !!python/tuple
        - name: torch.optim.lr_scheduler.StepLR
          step_size: 10
          gamma: 0.8

trainer:
  name: Trainer
  debug_iterations: null
  precision: bf16 # bf16_mixed, fp16_mixed, fp32_policy
  epochs: 20
  detect_anomaly: false
  gradient_accumulation_steps: 2
  save_every: 2
  best_metric: ppl
  logging_format: "RANK_%(rank)s - %(asctime)s - %(name)s - %(levelname)s - %(message)s"
  experiment_dir: ./results/
  schedulers: !!python/tuple
    - name: nostalgia.utils.param_scheduler.PeriodicScheduler # ExponentialIncrease, ConstantScheduler, PeriodicScheduler
      label: beta_scheduler_kl_rws
    - name: nostalgia.utils.param_scheduler.ExponentialSchedulerGumbel
      label: temperature_scheduler_rws
      init_temperature: 1
      min_temperature: 0.5
      training_fraction_to_reach_min: 0.7
